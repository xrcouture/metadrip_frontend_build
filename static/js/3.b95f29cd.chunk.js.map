{"version":3,"sources":["../../../src/internal/request-batcher.ts","../../../src/api/alchemy-provider.ts","../../../src/internal/websocket-backfiller.ts","../../../src/api/alchemy-websocket-provider.ts","../../src/index.ts","../node_modules/websocket/lib/browser.js","../node_modules/es5-ext/global.js","../node_modules/websocket/lib/version.js"],"names":["RequestBatcher","sendBatchFn","maxBatchSize","request","inflightRequest","resolve","undefined","reject","promise","Promise","this","pendingBatch","push","length","sendBatchRequest","pendingBatchTimer","setTimeout","batch","clearTimeout","map","inflight","then","result","forEach","index","payload","error","Error","message","code","data","AlchemyProvider","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","network","connection","getAlchemyConnectionInfo","url","throttleLimit","maxRetries","ethersNetwork","batchRequests","batcherConnection","headers","batcher","requests","JSON","stringify","detectNetwork","method","params","_send","methodName","forceBatch","id","_nextId","jsonrpc","enqueueRequest","emit","action","provider","cache","indexOf","_cache","getResult","response","getNetworkFromEthers","Object","values","includes","join","type","allowGzip","WebsocketBackfiller","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","getBlockNumber","toBlockNumber","getHeadEventsInRange","Math","max","maxBackfillBlocks","lastSeenBlockNumber","number","minBlockNumber","getReorgHeads","reorgHeads","intermediateHeads","filter","previousLogs","getLogsInRange","blockNumber","getCommonAncestor","commonAncestor","removedLogs","log","removed","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","newMax","send","blockNumberHex","toBlockExclusive","batchParts","i","sendBatch","blockHeads","toNewHeadsEvent","oldEvent","getBlockByNumber","blockHead","hash","reverse","oldLog","blockHash","rangeFilter","fromBlock","toBlock","head","totalDifficulty","transactions","uncles","dedupeNewHeads","events","dedupe","event","dedupeLogs","items","getKey","keysSeen","Set","item","key","has","add","CANCELLED","AlchemyWebSocketProvider","wsConstructor","protocol","ws","process","versions","node","w3cwebsocket","WebSocket","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","parse","Array","isArray","isResponse","isSubscriptionEvent","physicalId","subscription","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","clear","cancelled","cancel","makeCancelToken","cancelBackfill","resubscribeAndBackfill","console","startHeartbeat","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","eventName","listener","_addEventListener","_off","_removeAllListeners","_listenerCount","_listeners","once","_events","_startEvent","customStartEvent","tag","param","processFunc","subIdPromise","_subIds","startingBlockNumber","all","subId","resolvedParams","set","sentEvents","_subs","args","stopped","eventTag","apply","_stopEvent","parts","nextId","sendBatchConcurrently","removeSocketListeners","stopHeartbeatAndBackfill","e","listenerCount","_websocket","addEventListener","handleReopen","removeEventListener","withBackoffRetries","withTimeout","getNewHeadsBackfill","backfillEvents","emitNewHeadsEvent","getLogsBackfill","emitLogsEvent","emitGenericEvent","emitProcessFn","emitFunction","setInterval","reconnect","req","fromAddress","toAddress","hashesOnly","_subscribe","PENDING_TRANSACTIONS","addresses","includeRemoved","MINED_TRANSACTIONS","_getFilter","from","toNumber","_emitted","block","formatter","filterLog","removeAllListeners","found","f","retryCount","shouldRetry","nextWaitTime","delay","min","ms","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","protocolsOrOptions","options","onclose","onerror","onmessage","onopen","ondown","onreopen","CONNECTING","SturdyWebSocket","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","listeners","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","close","reason","disposeSocket","shutdown","readyState","handleClose","dispatchEvent","dispatchEventOfType","l","connectTimeout","handleError","handleOpen","connectTimeoutId","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","noop","slice","callListener","defaultPrevented","call","handleEvent","debug","s","DEFAULT_OPTIONS","POSITIVE_INFINITY","keys","value","_globalThis","globalThis","require","window","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop","defineProperty","module","exports","naiveFallback","self","prototype","configurable","__global__","version"],"mappings":"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","file":"static/js/3.b95f29cd.chunk.js","sourcesContent":["import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = { ...this.connection };\n    batcherConnection.headers!['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","module.exports = require('../package.json').version;\n"],"sourceRoot":""}